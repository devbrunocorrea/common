#!/usr/bin/env php
<?php

/*
 * This file is part of gpupo/common
 * Created by Gilmar Pupo <contact@gpupo.com>
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 * For more information, see <https://opensource.gpupo.com/>.
 */

namespace Gpupo\Common\Console;

require dirname(__DIR__).'/config/bootstrap.php';

use RecursiveIteratorIterator;
use RecursiveDirectoryIterator;
use RegexIterator;
use Gpupo\Common\Console\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Output\OutputInterface;
use Gpupo\Common\Tools\Documentor\Docblock;
use Symfony\Component\Console\Input\ArrayInput;

$app = new Application('@gpupo Common', '4.3');

$opts = [
    ['key' => 'class'],
    ['key' => 'ignore-superclass', 'options' => ['y', 'n'], 'default' =>'y'],
];

$app->appendCommand('tests:implement', 'Implement a test', $opts)
    ->setCode(function (InputInterface $input, OutputInterface $output) use ($app, $opts) {

        $list = $app->processInputParameters($opts, $input, $output);
        $class  = new \ReflectionClass($list['class']);

        $docblock = Docblock::getInstance();
        $methods = [];
        foreach ($class->getMethods() as $m) {
            if ($m->class === $class->getName() || 'y' !== $list['ignore-superclass']) {
                 if (false === strpos($m->name, '__') && !in_array($m->name,['toLog'])) {
                     $methods[] = $m->name;
                 }
            } else {
                if ($output->isVerbose()) {
                    $output->writeln('Ignore method: '.$m->name. ' of ' . $m->class);
                }
            }
        }

        if(empty($methods)) {
            return $output->writeln('<error>No methods for '.$class->getName().'</>');
        }

        $schema = [];

        $entityInterface = false;
        if ($class->hasmethod('toDocBlock')) {
            $entityInterface = true;
            $object = new $list['class']();
            $doc = $object->toDocBlock();
            $schema = $doc['schema'];

        } else {
            $discovery = $docblock->discovery($class);
            $schema = $discovery['schema'];
        }

        $test = $docblock->generate([
            'class'     => $class->getName(),
            'entity'    => $entityInterface,
            'methods'   => $methods,
            'schema'    => $schema,
            'config'    => [
                'namespace' => (array) $app->getConfig('namespace'),
            ],
        ]);

        $output->writeln('Generate <comment>'. $test['filename'] . '</>');

        if (!is_dir($test['testDirectory'])) {
            mkdir($test['testDirectory'], 0777, true);
            $output->writeln('Directory <comment>'. $test['testDirectory'] . '</> created');
        }

        file_put_contents($test['filename'], $test['content'], FILE_TEXT);

        $output->writeln('Try run <comment>bin/phpunit  --no-log --filter='. $test['testShortName'] . '</>');
});


$app->run();
