#!/usr/bin/env php
<?php

/*
 * This file is part of gpupo/common
 * Created by Gilmar Pupo <contact@gpupo.com>
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 * For more information, see <https://opensource.gpupo.com/>.
 */

namespace Gpupo\Common\Console;

require './config/bootstrap.php';

use RecursiveIteratorIterator;
use RecursiveDirectoryIterator;
use RegexIterator;
use Gpupo\Common\Console\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Output\OutputInterface;
use Gpupo\Common\Tools\Documentor\Docblock;
use Symfony\Component\Console\Input\ArrayInput;

$app = new Application('Developer Toolbox - @gpupo Common', '4.3');

$opts = [
    ['key' => 'class'],
    ['key' => 'ignore-superclass', 'options' => ['y', 'n'], 'default' =>'y'],
];

$app->appendCommand('generate', 'Implement a Testcase for a given class', $opts)
    ->setCode(function (InputInterface $input, OutputInterface $output) use ($app, $opts) {

        $list = $app->processInputParameters($opts, $input, $output);
        $class  = new \ReflectionClass($list['class']);

        $docblock = Docblock::getInstance();
        $methods = [];
        foreach ($class->getMethods() as $m) {
            if ($m->class === $class->getName() || ('y' !== (string) $list['ignore-superclass'] && !empty($list['ignore-superclass']))) {
                 $output->writeln('Track superclass methods', OutputInterface::VERBOSITY_VERBOSE);
                 if (false === strpos($m->name, '__') && !in_array($m->name,['toLog'])) {
                     $methods[] = $m->name;
                 }
            } else {
                $output->writeln('Ignore method: '.$m->name. ' of ' . $m->class, OutputInterface::VERBOSITY_VERBOSE);
            }
        }

        if(empty($methods)) {
            return $output->writeln('<error>No methods for '.$class->getName().'</>');
        }

        $schema = [];

        $entityInterface = false;
        if ($class->hasmethod('toDocBlock')) {
            $entityInterface = true;
            $object = new $list['class']();
            $doc = $object->toDocBlock();
            $schema = $doc['schema'];

        } else {
            try {
                $discovery = $docblock->discovery($class);
                $schema = $discovery['schema'];
            } catch (\Exception $e) {
                error_log(sprintf('Warning:[%s]', $e->getMessage()));
                $schema = [];
            }
        }

        $test = $docblock->generate([
            'class'     => $class->getName(),
            'entity'    => $entityInterface,
            'methods'   => $methods,
            'schema'    => $schema,
            'config'    => [
                // 'namespace' => (array) $app->getC/nfig('namespace'),
                'namespace' => [],
            ],
        ]);

        $output->writeln('Generate <comment>'. $test['filename'] . '</>');

        if (!is_dir($test['testDirectory'])) {
            mkdir($test['testDirectory'], 0777, true);
            $output->writeln('Directory <comment>'. $test['testDirectory'] . '</> created');
        }

        file_put_contents($test['filename'], $test['content'], FILE_TEXT);

        $output->writeln('Try run <comment>bin/phpunit  --no-log --filter='. $test['testShortName'] . '</>');
});

$app->appendCommand('find-and-generate', 'Find all classes in src/ and create Testcases')
    ->setCode(function (InputInterface $input, OutputInterface $output) use ($app) {

        $path = 'src/';
        $fqcns = [];

        $allFiles = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path));
        $phpFiles = new RegexIterator($allFiles, '/\.php$/');
        foreach ($phpFiles as $phpFile) {
            $content = file_get_contents($phpFile->getRealPath());
            $tokens = token_get_all($content);
            $namespace = '';
            for ($index = 0; isset($tokens[$index]); ++$index) {
                if (!isset($tokens[$index][0])) {
                    continue;
                }
                if (T_NAMESPACE === $tokens[$index][0]) {
                    $index += 2;
                    while (isset($tokens[$index]) && is_array($tokens[$index])) {
                        $namespace .= $tokens[$index++][1];
                    }
                }
                if (T_CLASS === $tokens[$index][0]) {
                    $index += 2;
                    $fqcns[] = $namespace.'\\'.$tokens[$index][1];
                }
            }
        }

        $tests = [];


        $mode = null;

        foreach ($fqcns as $item) {
            $output->writeln($item);

            $ex = explode('\\', $item);

            if ('bundle' === $mode) {
                $f = $ex[0].'\\'.$ex[1].'\\';
                $t = $f.'Tests\\';
            } else {
                $f = $ex[0].'\\';
                $t = $f.'Tests\\';
            }

            $testCase = '\\'.str_replace($f, $t, $item).'Test';
            if (!class_exists($testCase) && false === strpos($item, 'Abstract') && false === strpos($item, 'Command')) {
                $tests[$item] = $testCase;
            }
        }

        $output->writeln("\nTests to implement\n");

        foreach ($tests as $class => $test) {
            $output->writeln($class.' => '.$test);
            $command = $app->find('generate');
            $t = new ArrayInput([
               'command'    => 'generate',
               '--class'      => $class,
            ]);
            try {
                $command->run($t, $output);
            } catch (\Exception $e) {
                $output->writeln('<error>'.$e->getMessage().'</>');
            }
        }
    });

$app->run();
